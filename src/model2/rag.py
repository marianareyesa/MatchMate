import os
from PyPDF2 import PdfReader
from langchain_community.document_loaders import TextLoader
from langchain.text_splitter import CharacterTextSplitter
from langchain_community.embeddings import OpenAIEmbeddings
from langchain_community.vectorstores import FAISS
from langchain.chains import RetrievalQA
from langchain_community.chat_models import ChatOpenAI

# üõ°Ô∏è SET YOUR OPENAI API KEY HERE
openai_api_key = "your-openai-api-key-here"  

# 1. Extract text and chunk from PDFs
def extract_and_process_pdf(pdf_file_paths):
    all_data = []
    for pdf_file_path in pdf_file_paths:
        pdf_text = ""
        with open(pdf_file_path, 'rb') as f:
            pdf_reader = PdfReader(f)
            for page in pdf_reader.pages:
                pdf_text += page.extract_text()

        temp_txt_filename = pdf_file_path.replace('.pdf', '.txt')
        with open(temp_txt_filename, 'w', encoding='utf-8') as f:
            f.write(pdf_text)

        loader = TextLoader(file_path=temp_txt_filename, encoding="utf-8")
        data = loader.load()
        text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
        chunks = text_splitter.split_documents(data)
        all_data.extend(chunks)
    
    return all_data

# 2. Create the RAG chain using GPT-4o
def create_rag_chain(processed_texts, api_key):
    embeddings = OpenAIEmbeddings(openai_api_key=api_key)
    vectorstore = FAISS.from_documents(processed_texts, embedding=embeddings)
    retriever = vectorstore.as_retriever()
    llm = ChatOpenAI(temperature=0.7, model_name="gpt-4o", openai_api_key=api_key)
    qa_chain = RetrievalQA.from_chain_type(
        llm=llm,
        retriever=retriever,
        chain_type="stuff"
    )
    return qa_chain

# 3. Build a prompt based on the MatchMate feedback
def build_prompt_from_report(feedback_report):
    return f"""
You are a professional tennis coach. The following is a performance report generated by an AI tennis tool named MatchMate.

Your task is to create a detailed training session to improve the player's technique based on the issues identified in the report.

Include:
- A warm-up
- Specific drills targeting weak areas
- Time allocations
- Any advice or tips
- Prioritize the most frequent issues
- Optional: equipment or space needed

Here is the report:

{feedback_report}

Please generate a structured training plan.
"""

# 4. Load PDFs and generate training from a report
def generate_training_from_report(feedback_report, api_key):
    pdf_files = [
        "forehand.pdf",
        "backhand.pdf",
        "serve.pdf",
        "forehand_backhand_drills.pdf",
        "serve_return_drills.pdf",
        "specialty_strategy.pdf"
    ]
    
    processed_texts = extract_and_process_pdf(pdf_files)
    rag_chain = create_rag_chain(processed_texts, api_key=api_key)
    prompt = build_prompt_from_report(feedback_report)
    response = rag_chain.run(prompt)
    return response

# 5. Example usage
if __name__ == "__main__":
    feedback_report = """
üéæ MatchMate Feedback Report üéæ

Shot Counts:
Forehands: 4
Backhands: 5
Serves: 0

Feedback Summary:
follow through: 54 time(s)
bend knees and finish up: 108 time(s)
bend knees: 0 time(s)
racket up: 35 time(s)
perfect: 0 time(s)
"""

    result = generate_training_from_report(feedback_report, api_key=openai_api_key)
    print("\nüìã Generated Training Plan:\n")
    print(result)
